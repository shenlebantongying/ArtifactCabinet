Mainly: https://felleisen.org/matthias/4400-s20/index.html

Also, a similar course, probably not useful: https://felleisen.org/matthias/lp/index.html

Also, some focus on syntax-parse
https://school.racket-lang.org/2019/plan/index.html

The first two cover interpretive models of programming language concepts:

    Krishnamurthi, Programming Languages: Applications and Implementations (PLAI)

    Friedman & Wand, Essentials of Programming Languages (EoPL)

If you like types or the connection between types and proofs,

    Pierce, Types and Programming Languages (TaPL)

    Girard, Types and Proofs

For the connections between interpreters, semantics, and abstract machines, consider

    Felleisen, Findler, Flatt, Semantics Engineering (parts I, II)


